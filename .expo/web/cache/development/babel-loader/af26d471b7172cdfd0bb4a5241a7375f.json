{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = _interopRequireWildcard(require(\"react-native\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNativeGestureResponder = require(\"react-native-gesture-responder\");\n\nvar _reactNativeScroller = _interopRequireDefault(require(\"react-native-scroller\"));\n\nvar _TransformUtils = require(\"./TransformUtils\");\n\nvar _jsxFileName = \"/Users/accedo/Desktop/albums/node_modules/react-native-view-transformer/library/transform/ViewTransformer.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar ViewTransformer = function (_Component) {\n  (0, _inherits2.default)(ViewTransformer, _Component);\n\n  var _super = _createSuper(ViewTransformer);\n\n  function ViewTransformer(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, ViewTransformer);\n    _this = _super.call(this, props);\n    _this.state = {\n      scale: 1,\n      translateX: 0,\n      translateY: 0,\n      animator: new _reactNative.Animated.Value(0),\n      width: 0,\n      height: 0,\n      pageX: 0,\n      pageY: 0\n    };\n    _this._viewPortRect = new _TransformUtils.Rect();\n    _this.cancelAnimation = _this.cancelAnimation.bind((0, _assertThisInitialized2.default)(_this));\n    _this.contentRect = _this.contentRect.bind((0, _assertThisInitialized2.default)(_this));\n    _this.transformedContentRect = _this.transformedContentRect.bind((0, _assertThisInitialized2.default)(_this));\n    _this.animate = _this.animate.bind((0, _assertThisInitialized2.default)(_this));\n    _this.scroller = new _reactNativeScroller.default(true, function (dx, dy, scroller) {\n      if (dx === 0 && dy === 0 && scroller.isFinished()) {\n        _this.animateBounce();\n\n        return;\n      }\n\n      _this.updateTransform({\n        translateX: _this.state.translateX + dx / _this.state.scale,\n        translateY: _this.state.translateY + dy / _this.state.scale\n      });\n    });\n    return _this;\n  }\n\n  (0, _createClass2.default)(ViewTransformer, [{\n    key: \"viewPortRect\",\n    value: function viewPortRect() {\n      this._viewPortRect.set(0, 0, this.state.width, this.state.height);\n\n      return this._viewPortRect;\n    }\n  }, {\n    key: \"contentRect\",\n    value: function contentRect() {\n      var rect = this.viewPortRect().copy();\n\n      if (this.props.contentAspectRatio && this.props.contentAspectRatio > 0) {\n        rect = (0, _TransformUtils.fitCenterRect)(this.props.contentAspectRatio, rect);\n      }\n\n      return rect;\n    }\n  }, {\n    key: \"transformedContentRect\",\n    value: function transformedContentRect() {\n      var rect = (0, _TransformUtils.transformedRect)(this.viewPortRect(), this.currentTransform());\n\n      if (this.props.contentAspectRatio && this.props.contentAspectRatio > 0) {\n        rect = (0, _TransformUtils.fitCenterRect)(this.props.contentAspectRatio, rect);\n      }\n\n      return rect;\n    }\n  }, {\n    key: \"currentTransform\",\n    value: function currentTransform() {\n      return new _TransformUtils.Transform(this.state.scale, this.state.translateX, this.state.translateY);\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var _this2 = this;\n\n      this.gestureResponder = (0, _reactNativeGestureResponder.createResponder)({\n        onStartShouldSetResponder: function onStartShouldSetResponder(evt, gestureState) {\n          return true;\n        },\n        onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(evt, gestureState) {\n          return true;\n        },\n        onResponderMove: this.onResponderMove.bind(this),\n        onResponderGrant: this.onResponderGrant.bind(this),\n        onResponderRelease: this.onResponderRelease.bind(this),\n        onResponderTerminate: this.onResponderRelease.bind(this),\n        onResponderTerminationRequest: function onResponderTerminationRequest(evt, gestureState) {\n          return false;\n        },\n        onResponderSingleTapConfirmed: function onResponderSingleTapConfirmed(evt, gestureState) {\n          _this2.props.onSingleTapConfirmed && _this2.props.onSingleTapConfirmed();\n        }\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      this.props.onViewTransformed && this.props.onViewTransformed({\n        scale: this.state.scale,\n        translateX: this.state.translateX,\n        translateY: this.state.translateY\n      });\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.cancelAnimation();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var gestureResponder = this.gestureResponder;\n\n      if (!this.props.enableTransform) {\n        gestureResponder = {};\n      }\n\n      return _react.default.createElement(_reactNative.View, (0, _extends2.default)({}, this.props, gestureResponder, {\n        ref: 'innerViewRef',\n        onLayout: this.onLayout.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 7\n        }\n      }), _react.default.createElement(_reactNative.View, {\n        style: {\n          flex: 1,\n          transform: [{\n            scale: this.state.scale\n          }, {\n            translateX: this.state.translateX\n          }, {\n            translateY: this.state.translateY\n          }]\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }\n      }, this.props.children));\n    }\n  }, {\n    key: \"onLayout\",\n    value: function onLayout(e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n          width = _e$nativeEvent$layout.width,\n          height = _e$nativeEvent$layout.height;\n\n      if (width !== this.state.width || height !== this.state.height) {\n        this.setState({\n          width: width,\n          height: height\n        });\n      }\n\n      this.measureLayout();\n      this.props.onLayout && this.props.onLayout(e);\n    }\n  }, {\n    key: \"measureLayout\",\n    value: function measureLayout() {\n      var _this3 = this;\n\n      var handle = _reactNative.default.findNodeHandle(this.refs['innerViewRef']);\n\n      _reactNative.NativeModules.UIManager.measure(handle, function (x, y, width, height, pageX, pageY) {\n        if (typeof pageX === 'number' && typeof pageY === 'number') {\n          if (_this3.state.pageX !== pageX || _this3.state.pageY !== pageY) {\n            _this3.setState({\n              pageX: pageX,\n              pageY: pageY\n            });\n          }\n        }\n      }.bind(this));\n    }\n  }, {\n    key: \"onResponderGrant\",\n    value: function onResponderGrant(evt, gestureState) {\n      this.props.onTransformStart && this.props.onTransformStart();\n      this.setState({\n        responderGranted: true\n      });\n      this.measureLayout();\n    }\n  }, {\n    key: \"onResponderMove\",\n    value: function onResponderMove(evt, gestureState) {\n      this.cancelAnimation();\n      var dx = gestureState.moveX - gestureState.previousMoveX;\n      var dy = gestureState.moveY - gestureState.previousMoveY;\n\n      if (this.props.enableResistance) {\n        var d = this.applyResistance(dx, dy);\n        dx = d.dx;\n        dy = d.dy;\n      }\n\n      if (!this.props.enableTranslate) {\n        dx = dy = 0;\n      }\n\n      var transform = {};\n\n      if (gestureState.previousPinch && gestureState.pinch && this.props.enableScale) {\n        var scaleBy = gestureState.pinch / gestureState.previousPinch;\n        var pivotX = gestureState.moveX - this.state.pageX;\n        var pivotY = gestureState.moveY - this.state.pageY;\n        var rect = (0, _TransformUtils.transformedRect)((0, _TransformUtils.transformedRect)(this.contentRect(), this.currentTransform()), new _TransformUtils.Transform(scaleBy, dx, dy, {\n          x: pivotX,\n          y: pivotY\n        }));\n        transform = (0, _TransformUtils.getTransform)(this.contentRect(), rect);\n      } else {\n        if (Math.abs(dx) > 2 * Math.abs(dy)) {\n          dy = 0;\n        } else if (Math.abs(dy) > 2 * Math.abs(dx)) {\n          dx = 0;\n        }\n\n        transform.translateX = this.state.translateX + dx / this.state.scale;\n        transform.translateY = this.state.translateY + dy / this.state.scale;\n      }\n\n      this.updateTransform(transform);\n      return true;\n    }\n  }, {\n    key: \"onResponderRelease\",\n    value: function onResponderRelease(evt, gestureState) {\n      var handled = this.props.onTransformGestureReleased && this.props.onTransformGestureReleased({\n        scale: this.state.scale,\n        translateX: this.state.translateX,\n        translateY: this.state.translateY\n      });\n\n      if (handled) {\n        return;\n      }\n\n      if (gestureState.doubleTapUp) {\n        if (!this.props.enableScale) {\n          this.animateBounce();\n          return;\n        }\n\n        var pivotX = 0,\n            pivotY = 0;\n\n        if (gestureState.dx || gestureState.dy) {\n          pivotX = gestureState.moveX - this.state.pageX;\n          pivotY = gestureState.moveY - this.state.pageY;\n        } else {\n          pivotX = gestureState.x0 - this.state.pageX;\n          pivotY = gestureState.y0 - this.state.pageY;\n        }\n\n        this.performDoubleTapUp(pivotX, pivotY);\n      } else {\n        if (this.props.enableTranslate) {\n          this.performFling(gestureState.vx, gestureState.vy);\n        } else {\n          this.animateBounce();\n        }\n      }\n    }\n  }, {\n    key: \"performFling\",\n    value: function performFling(vx, vy) {\n      var startX = 0;\n      var startY = 0;\n      var maxX, minX, maxY, minY;\n      var availablePanDistance = (0, _TransformUtils.availableTranslateSpace)(this.transformedContentRect(), this.viewPortRect());\n\n      if (vx > 0) {\n        minX = 0;\n\n        if (availablePanDistance.left > 0) {\n          maxX = availablePanDistance.left + this.props.maxOverScrollDistance;\n        } else {\n          maxX = 0;\n        }\n      } else {\n        maxX = 0;\n\n        if (availablePanDistance.right > 0) {\n          minX = -availablePanDistance.right - this.props.maxOverScrollDistance;\n        } else {\n          minX = 0;\n        }\n      }\n\n      if (vy > 0) {\n        minY = 0;\n\n        if (availablePanDistance.top > 0) {\n          maxY = availablePanDistance.top + this.props.maxOverScrollDistance;\n        } else {\n          maxY = 0;\n        }\n      } else {\n        maxY = 0;\n\n        if (availablePanDistance.bottom > 0) {\n          minY = -availablePanDistance.bottom - this.props.maxOverScrollDistance;\n        } else {\n          minY = 0;\n        }\n      }\n\n      vx *= 1000;\n      vy *= 1000;\n\n      if (Math.abs(vx) > 2 * Math.abs(vy)) {\n        vy = 0;\n      } else if (Math.abs(vy) > 2 * Math.abs(vx)) {\n        vx = 0;\n      }\n\n      this.scroller.fling(startX, startY, vx, vy, minX, maxX, minY, maxY);\n    }\n  }, {\n    key: \"performDoubleTapUp\",\n    value: function performDoubleTapUp(pivotX, pivotY) {\n      console.log('performDoubleTapUp...pivot=' + pivotX + ', ' + pivotY);\n      var curScale = this.state.scale;\n      var scaleBy;\n\n      if (curScale > (1 + this.props.maxScale) / 2) {\n        scaleBy = 1 / curScale;\n      } else {\n        scaleBy = this.props.maxScale / curScale;\n      }\n\n      var rect = (0, _TransformUtils.transformedRect)(this.transformedContentRect(), new _TransformUtils.Transform(scaleBy, 0, 0, {\n        x: pivotX,\n        y: pivotY\n      }));\n      rect = (0, _TransformUtils.transformedRect)(rect, new _TransformUtils.Transform(1, this.viewPortRect().centerX() - pivotX, this.viewPortRect().centerY() - pivotY));\n      rect = (0, _TransformUtils.alignedRect)(rect, this.viewPortRect());\n      this.animate(rect);\n    }\n  }, {\n    key: \"applyResistance\",\n    value: function applyResistance(dx, dy) {\n      var availablePanDistance = (0, _TransformUtils.availableTranslateSpace)(this.transformedContentRect(), this.viewPortRect());\n\n      if (dx > 0 && availablePanDistance.left < 0 || dx < 0 && availablePanDistance.right < 0) {\n        dx /= 3;\n      }\n\n      if (dy > 0 && availablePanDistance.top < 0 || dy < 0 && availablePanDistance.bottom < 0) {\n        dy /= 3;\n      }\n\n      return {\n        dx: dx,\n        dy: dy\n      };\n    }\n  }, {\n    key: \"cancelAnimation\",\n    value: function cancelAnimation() {\n      this.state.animator.stopAnimation();\n    }\n  }, {\n    key: \"animate\",\n    value: function animate(targetRect, durationInMillis) {\n      var _this4 = this;\n\n      var duration = 200;\n\n      if (durationInMillis) {\n        duration = durationInMillis;\n      }\n\n      var fromRect = this.transformedContentRect();\n\n      if (fromRect.equals(targetRect)) {\n        console.log('animate...equal rect, skip animation');\n        return;\n      }\n\n      this.state.animator.removeAllListeners();\n      this.state.animator.setValue(0);\n      this.state.animator.addListener(function (state) {\n        var progress = state.value;\n        var left = fromRect.left + (targetRect.left - fromRect.left) * progress;\n        var right = fromRect.right + (targetRect.right - fromRect.right) * progress;\n        var top = fromRect.top + (targetRect.top - fromRect.top) * progress;\n        var bottom = fromRect.bottom + (targetRect.bottom - fromRect.bottom) * progress;\n        var transform = (0, _TransformUtils.getTransform)(_this4.contentRect(), new _TransformUtils.Rect(left, top, right, bottom));\n\n        _this4.updateTransform(transform);\n      });\n\n      _reactNative.Animated.timing(this.state.animator, {\n        toValue: 1,\n        duration: duration,\n        easing: _reactNative.Easing.inOut(_reactNative.Easing.ease)\n      }).start();\n    }\n  }, {\n    key: \"animateBounce\",\n    value: function animateBounce() {\n      var curScale = this.state.scale;\n      var minScale = 1;\n      var maxScale = this.props.maxScale;\n      var scaleBy = 1;\n\n      if (curScale > maxScale) {\n        scaleBy = maxScale / curScale;\n      } else if (curScale < minScale) {\n        scaleBy = minScale / curScale;\n      }\n\n      var rect = (0, _TransformUtils.transformedRect)(this.transformedContentRect(), new _TransformUtils.Transform(scaleBy, 0, 0, {\n        x: this.viewPortRect().centerX(),\n        y: this.viewPortRect().centerY()\n      }));\n      rect = (0, _TransformUtils.alignedRect)(rect, this.viewPortRect());\n      this.animate(rect);\n    }\n  }, {\n    key: \"updateTransform\",\n    value: function updateTransform(transform) {\n      this.setState(transform);\n    }\n  }, {\n    key: \"forceUpdateTransform\",\n    value: function forceUpdateTransform(transform) {\n      this.setState(transform);\n    }\n  }, {\n    key: \"getAvailableTranslateSpace\",\n    value: function getAvailableTranslateSpace() {\n      return (0, _TransformUtils.availableTranslateSpace)(this.transformedContentRect(), this.viewPortRect());\n    }\n  }]);\n  return ViewTransformer;\n}(_react.Component);\n\nexports.default = ViewTransformer;\nViewTransformer.Rect = _TransformUtils.Rect;\nViewTransformer.getTransform = _TransformUtils.getTransform;\nViewTransformer.propTypes = {\n  enableTransform: _propTypes.default.bool,\n  enableScale: _propTypes.default.bool,\n  enableTranslate: _propTypes.default.bool,\n  maxOverScrollDistance: _propTypes.default.number,\n  maxScale: _propTypes.default.number,\n  contentAspectRatio: _propTypes.default.number,\n  enableResistance: _propTypes.default.bool,\n  onViewTransformed: _propTypes.default.func,\n  onTransformGestureReleased: _propTypes.default.func,\n  onSingleTapConfirmed: _propTypes.default.func\n};\nViewTransformer.defaultProps = {\n  maxOverScrollDistance: 20,\n  enableScale: true,\n  enableTranslate: true,\n  enableTransform: true,\n  maxScale: 1,\n  enableResistance: false\n};","map":{"version":3,"sources":["/Users/accedo/Desktop/albums/node_modules/react-native-view-transformer/library/transform/ViewTransformer.js"],"names":["ViewTransformer","props","state","scale","translateX","translateY","animator","Animated","Value","width","height","pageX","pageY","_viewPortRect","Rect","cancelAnimation","bind","contentRect","transformedContentRect","animate","scroller","Scroller","dx","dy","isFinished","animateBounce","updateTransform","set","rect","viewPortRect","copy","contentAspectRatio","currentTransform","Transform","gestureResponder","onStartShouldSetResponder","evt","gestureState","onMoveShouldSetResponderCapture","onResponderMove","onResponderGrant","onResponderRelease","onResponderTerminate","onResponderTerminationRequest","onResponderSingleTapConfirmed","onSingleTapConfirmed","prevProps","prevState","onViewTransformed","enableTransform","onLayout","flex","transform","children","e","nativeEvent","layout","setState","measureLayout","handle","ReactNative","findNodeHandle","refs","NativeModules","UIManager","measure","x","y","onTransformStart","responderGranted","moveX","previousMoveX","moveY","previousMoveY","enableResistance","d","applyResistance","enableTranslate","previousPinch","pinch","enableScale","scaleBy","pivotX","pivotY","Math","abs","handled","onTransformGestureReleased","doubleTapUp","x0","y0","performDoubleTapUp","performFling","vx","vy","startX","startY","maxX","minX","maxY","minY","availablePanDistance","left","maxOverScrollDistance","right","top","bottom","fling","console","log","curScale","maxScale","centerX","centerY","stopAnimation","targetRect","durationInMillis","duration","fromRect","equals","removeAllListeners","setValue","addListener","progress","value","timing","toValue","easing","Easing","inOut","ease","start","minScale","Component","getTransform","propTypes","PropTypes","bool","number","func","defaultProps"],"mappings":"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","sourcesContent":["'use strict';\n\nimport React, { Component } from 'react';\nimport ReactNative, {\n  View,\n  Animated,\n  Easing,\n  NativeModules,\n} from 'react-native';\nimport PropTypes from 'prop-types';\n\nimport { createResponder } from 'react-native-gesture-responder';\nimport Scroller from 'react-native-scroller';\nimport {\n  Rect,\n  Transform,\n  transformedRect,\n  availableTranslateSpace,\n  fitCenterRect,\n  alignedRect,\n  getTransform,\n} from './TransformUtils';\n\nexport default class ViewTransformer extends Component {\n\n  static Rect = Rect;\n  static getTransform = getTransform;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      //transform state\n      scale: 1,\n      translateX: 0,\n      translateY: 0,\n\n      //animation state\n      animator: new Animated.Value(0),\n\n      //layout\n      width: 0,\n      height: 0,\n      pageX: 0,\n      pageY: 0,\n    };\n    this._viewPortRect = new Rect(); //A holder to avoid new too much\n\n    this.cancelAnimation = this.cancelAnimation.bind(this);\n    this.contentRect = this.contentRect.bind(this);\n    this.transformedContentRect = this.transformedContentRect.bind(this);\n    this.animate = this.animate.bind(this);\n\n    this.scroller = new Scroller(true, (dx, dy, scroller) =>{\n      if (dx === 0 && dy === 0 && scroller.isFinished()) {\n        this.animateBounce();\n        return;\n      }\n\n      this.updateTransform({\n        translateX: this.state.translateX + dx / this.state.scale,\n        translateY: this.state.translateY + dy / this.state.scale\n      })\n    });\n  }\n\n  viewPortRect() {\n    this._viewPortRect.set(0, 0, this.state.width, this.state.height);\n    return this._viewPortRect;\n  }\n\n  contentRect() {\n    let rect = this.viewPortRect().copy();\n    if (this.props.contentAspectRatio && this.props.contentAspectRatio > 0) {\n      rect = fitCenterRect(this.props.contentAspectRatio, rect);\n    }\n    return rect;\n  }\n\n  transformedContentRect() {\n    let rect = transformedRect(this.viewPortRect(), this.currentTransform());\n    if (this.props.contentAspectRatio && this.props.contentAspectRatio > 0) {\n      rect = fitCenterRect(this.props.contentAspectRatio, rect);\n    }\n    return rect;\n  }\n\n  currentTransform() {\n    return new Transform(this.state.scale, this.state.translateX, this.state.translateY);\n  }\n\n  componentWillMount() {\n    this.gestureResponder = createResponder({\n      onStartShouldSetResponder: (evt, gestureState) => true,\n      onMoveShouldSetResponderCapture: (evt, gestureState) => true,\n      //onMoveShouldSetResponder: this.handleMove,\n      onResponderMove: this.onResponderMove.bind(this),\n      onResponderGrant: this.onResponderGrant.bind(this),\n      onResponderRelease: this.onResponderRelease.bind(this),\n      onResponderTerminate: this.onResponderRelease.bind(this),\n      onResponderTerminationRequest: (evt, gestureState) => false, //Do not allow parent view to intercept gesture\n      onResponderSingleTapConfirmed: (evt, gestureState) => {\n        this.props.onSingleTapConfirmed && this.props.onSingleTapConfirmed();\n      }\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    this.props.onViewTransformed && this.props.onViewTransformed({\n      scale: this.state.scale,\n      translateX: this.state.translateX,\n      translateY: this.state.translateY\n    });\n  }\n\n  componentWillUnmount() {\n    this.cancelAnimation();\n  }\n\n  render() {\n    let gestureResponder = this.gestureResponder;\n    if (!this.props.enableTransform) {\n      gestureResponder = {};\n    }\n\n    return (\n      <View\n        {...this.props}\n        {...gestureResponder}\n        ref={'innerViewRef'}\n        onLayout={this.onLayout.bind(this)}>\n        <View\n          style={{\n            flex: 1,\n            transform: [\n                  {scale: this.state.scale},\n                  {translateX: this.state.translateX},\n                  {translateY: this.state.translateY}\n                ]\n          }}>\n          {this.props.children}\n        </View>\n      </View>\n    );\n  }\n\n  onLayout(e) {\n    const {width, height} = e.nativeEvent.layout;\n    if(width !== this.state.width || height !== this.state.height) {\n      this.setState({width, height});\n    }\n    this.measureLayout();\n\n    this.props.onLayout && this.props.onLayout(e);\n  }\n\n  measureLayout() {\n    let handle = ReactNative.findNodeHandle(this.refs['innerViewRef']);\n    NativeModules.UIManager.measure(handle, ((x, y, width, height, pageX, pageY) => {\n      if(typeof pageX === 'number' && typeof pageY === 'number') { //avoid undefined values on Android devices\n        if(this.state.pageX !== pageX || this.state.pageY !== pageY) {\n          this.setState({\n            pageX: pageX,\n            pageY: pageY\n          });\n        }\n      }\n\n    }).bind(this));\n  }\n\n  onResponderGrant(evt, gestureState) {\n    this.props.onTransformStart && this.props.onTransformStart();\n    this.setState({responderGranted: true});\n    this.measureLayout();\n  }\n\n  onResponderMove(evt, gestureState) {\n    this.cancelAnimation();\n\n    let dx = gestureState.moveX - gestureState.previousMoveX;\n    let dy = gestureState.moveY - gestureState.previousMoveY;\n    if (this.props.enableResistance) {\n      let d = this.applyResistance(dx, dy);\n      dx = d.dx;\n      dy = d.dy;\n    }\n\n    if(!this.props.enableTranslate) {\n      dx = dy = 0;\n    }\n\n    let transform = {};\n    if (gestureState.previousPinch && gestureState.pinch && this.props.enableScale) {\n      let scaleBy = gestureState.pinch / gestureState.previousPinch;\n      let pivotX = gestureState.moveX - this.state.pageX;\n      let pivotY = gestureState.moveY - this.state.pageY;\n\n\n      let rect = transformedRect(transformedRect(this.contentRect(), this.currentTransform()), new Transform(\n        scaleBy, dx, dy,\n        {\n          x: pivotX,\n          y: pivotY\n        }\n      ));\n      transform = getTransform(this.contentRect(), rect);\n    } else {\n      if (Math.abs(dx) > 2 * Math.abs(dy)) {\n        dy = 0;\n      } else if (Math.abs(dy) > 2 * Math.abs(dx)) {\n        dx = 0;\n      }\n      transform.translateX = this.state.translateX + dx / this.state.scale;\n      transform.translateY = this.state.translateY + dy / this.state.scale;\n    }\n\n    this.updateTransform(transform);\n    return true;\n  }\n\n  onResponderRelease(evt, gestureState) {\n    let handled = this.props.onTransformGestureReleased && this.props.onTransformGestureReleased({\n        scale: this.state.scale,\n        translateX: this.state.translateX,\n        translateY: this.state.translateY\n      });\n    if (handled) {\n      return;\n    }\n\n\n    if (gestureState.doubleTapUp) {\n      if (!this.props.enableScale) {\n        this.animateBounce();\n        return;\n      }\n      let pivotX = 0, pivotY = 0;\n      if (gestureState.dx || gestureState.dy) {\n        pivotX = gestureState.moveX - this.state.pageX;\n        pivotY = gestureState.moveY - this.state.pageY;\n      } else {\n        pivotX = gestureState.x0 - this.state.pageX;\n        pivotY = gestureState.y0 - this.state.pageY;\n      }\n\n      this.performDoubleTapUp(pivotX, pivotY);\n    } else {\n      if(this.props.enableTranslate) {\n        this.performFling(gestureState.vx, gestureState.vy);\n      } else {\n        this.animateBounce();\n      }\n    }\n  }\n\n\n\n\n\n\n  performFling(vx, vy) {\n    let startX = 0;\n    let startY = 0;\n    let maxX, minX, maxY, minY;\n    let availablePanDistance = availableTranslateSpace(this.transformedContentRect(), this.viewPortRect());\n    if (vx > 0) {\n      minX = 0;\n      if (availablePanDistance.left > 0) {\n        maxX = availablePanDistance.left + this.props.maxOverScrollDistance;\n      } else {\n        maxX = 0;\n      }\n    } else {\n      maxX = 0;\n      if (availablePanDistance.right > 0) {\n        minX = -availablePanDistance.right - this.props.maxOverScrollDistance;\n      } else {\n        minX = 0;\n      }\n    }\n    if (vy > 0) {\n      minY = 0;\n      if (availablePanDistance.top > 0) {\n        maxY = availablePanDistance.top + this.props.maxOverScrollDistance;\n      } else {\n        maxY = 0;\n      }\n    } else {\n      maxY = 0;\n      if (availablePanDistance.bottom > 0) {\n        minY = -availablePanDistance.bottom - this.props.maxOverScrollDistance;\n      } else {\n        minY = 0;\n      }\n    }\n\n    vx *= 1000; //per second\n    vy *= 1000;\n    if (Math.abs(vx) > 2 * Math.abs(vy)) {\n      vy = 0;\n    } else if (Math.abs(vy) > 2 * Math.abs(vx)) {\n      vx = 0;\n    }\n\n    this.scroller.fling(startX, startY, vx, vy, minX, maxX, minY, maxY);\n  }\n\n  performDoubleTapUp(pivotX, pivotY) {\n    console.log('performDoubleTapUp...pivot=' + pivotX + ', ' + pivotY);\n    let curScale = this.state.scale;\n    let scaleBy;\n    if (curScale > (1 + this.props.maxScale) / 2) {\n      scaleBy = 1 / curScale;\n    } else {\n      scaleBy = this.props.maxScale / curScale;\n    }\n\n    let rect = transformedRect(this.transformedContentRect(), new Transform(\n      scaleBy, 0, 0,\n      {\n        x: pivotX,\n        y: pivotY\n      }\n    ));\n    rect = transformedRect(rect, new Transform(1, this.viewPortRect().centerX() - pivotX, this.viewPortRect().centerY() - pivotY));\n    rect = alignedRect(rect, this.viewPortRect());\n\n    this.animate(rect);\n  }\n\n  applyResistance(dx, dy) {\n    let availablePanDistance = availableTranslateSpace(this.transformedContentRect(), this.viewPortRect());\n\n    if ((dx > 0 && availablePanDistance.left < 0)\n      ||\n      (dx < 0 && availablePanDistance.right < 0)) {\n      dx /= 3;\n    }\n    if ((dy > 0 && availablePanDistance.top < 0)\n      ||\n      (dy < 0 && availablePanDistance.bottom < 0)) {\n      dy /= 3;\n    }\n    return {\n      dx, dy\n    }\n  }\n\n  cancelAnimation() {\n    this.state.animator.stopAnimation();\n  }\n\n  animate(targetRect, durationInMillis) {\n    let duration = 200;\n    if (durationInMillis) {\n      duration = durationInMillis;\n    }\n\n    let fromRect = this.transformedContentRect();\n    if (fromRect.equals(targetRect)) {\n      console.log('animate...equal rect, skip animation');\n      return;\n    }\n\n    this.state.animator.removeAllListeners();\n    this.state.animator.setValue(0);\n    this.state.animator.addListener((state) =>{\n      let progress = state.value;\n\n      let left = fromRect.left + (targetRect.left - fromRect.left) * progress;\n      let right = fromRect.right + (targetRect.right - fromRect.right) * progress;\n      let top = fromRect.top + (targetRect.top - fromRect.top) * progress;\n      let bottom = fromRect.bottom + (targetRect.bottom - fromRect.bottom) * progress;\n\n      let transform = getTransform(this.contentRect(), new Rect(left, top, right, bottom));\n      this.updateTransform(transform);\n    });\n\n    Animated.timing(this.state.animator, {\n      toValue: 1,\n      duration: duration,\n      easing: Easing.inOut(Easing.ease)\n    }).start();\n  }\n\n  animateBounce() {\n    let curScale = this.state.scale;\n    let minScale = 1;\n    let maxScale = this.props.maxScale;\n    let scaleBy = 1;\n    if (curScale > maxScale) {\n      scaleBy = maxScale / curScale;\n    } else if (curScale < minScale) {\n      scaleBy = minScale / curScale;\n    }\n\n    let rect = transformedRect(this.transformedContentRect(), new Transform(\n      scaleBy,\n      0,\n      0,\n      {\n        x: this.viewPortRect().centerX(),\n        y: this.viewPortRect().centerY()\n      }\n    ));\n    rect = alignedRect(rect, this.viewPortRect());\n    this.animate(rect);\n  }\n\n  // Above are private functions. Do not use them if you don't known what you are doing.\n  // ***********************************************************************************\n  // Below are public functions. Feel free to use them.\n\n\n  updateTransform(transform) {\n    this.setState(transform);\n  }\n\n\n  forceUpdateTransform(transform) {\n    this.setState(transform);\n  }\n\n  getAvailableTranslateSpace() {\n    return availableTranslateSpace(this.transformedContentRect(), this.viewPortRect());\n  }\n}\n\nViewTransformer.propTypes = {\n  /**\n   * Use false to disable transform. Default is true.\n   */\n  enableTransform: PropTypes.bool,\n\n  /**\n   * Use false to disable scaling. Default is true.\n   */\n  enableScale: PropTypes.bool,\n\n  /**\n   * Use false to disable translateX/translateY. Default is true.\n   */\n  enableTranslate: PropTypes.bool,\n\n  /**\n   * Default is 20\n   */\n  maxOverScrollDistance: PropTypes.number,\n\n  maxScale: PropTypes.number,\n  contentAspectRatio: PropTypes.number,\n\n  /**\n   * Use true to enable resistance effect on over pulling. Default is false.\n   */\n  enableResistance: PropTypes.bool,\n\n  onViewTransformed: PropTypes.func,\n\n  onTransformGestureReleased: PropTypes.func,\n\n  onSingleTapConfirmed: PropTypes.func\n};\nViewTransformer.defaultProps = {\n  maxOverScrollDistance: 20,\n  enableScale: true,\n  enableTranslate: true,\n  enableTransform: true,\n  maxScale: 1,\n  enableResistance: false\n};\n"]},"metadata":{},"sourceType":"script"}